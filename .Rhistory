setwd("C:/Users/aw/EpiTech/CGSW/RAT-shiny")
library(httr)
baseURL <- 'http://54.210.2.87/'
a <- GET(paste0(baseURL,'sp/forms/'), authenticate('sp', '2007beagle'), accept_json())
a
a <- GET(paste0(baseURL,'sp/'), authenticate('sp', '2007beagle'), accept_json())
a
content(a)
a <- GET(paste0(baseURL,'api/v1/data?owner=sp'), authenticate('sp', '2007beagle'), accept_json())
a
content(a)
a <- GET(paste0(baseURL,'api/v1/users'), authenticate('sp', '2007beagle'), accept_json())
a
a <- GET(paste0(baseURL,'api/v1/user'), authenticate('sp', '2007beagle'), accept_json())
a
content(a)
a <- GET(paste0(baseURL,'api/v1/users'), authenticate('sp', '2007beagle'), accept_json())
a
content(a)
a <- GET(paste0(baseURL,'api/v1/users/sp'), authenticate('sp', '2007beagle'), accept_json())
a
content(a)
a <- GET(paste0(baseURL,'api/v1/user/sp'), authenticate('sp', '2007beagle'), accept_json())
a
content(a)
baseURL <- 'http://54.210.2.87/'
apiUrl <- 'http://54.210.2.87/api/v1/data' # this is the main access point to use for data
apiToken <- '8d0336d37ef28df590574f1cd4531f142e31ca02'
usr <- 'sp'
pwd <- '2007beagle'
apiUrl
req <- GET(paste0(baseURL,'api/v1/users' ), accept_json(), add_headers(Authorization = paste0('Token ',api_token))),
req <- GET(paste0(baseURL,'api/v1/users'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
api_token <- apiToken
req <- GET(paste0(baseURL,'api/v1/users'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
req
content(req)
req <- GET(paste0(baseURL,'api/v1/users/sp'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
req
content(req)
req <- GET(paste0(baseURL,'api/v1/users/ge'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
content(req)
req
req <- GET(paste0(baseURL,'api/v1/user'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
req
content(req)
req <- GET(paste0(baseURL,'api/v1/users'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
req
content(req)
req <- GET(paste0(baseURL,'api/v1'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
req
content(req)
req
req$cookies
api_token
req <- GET(paste0(baseURL,'api/v1/users'), accept_json(),
add_headers(Authorization = paste0('Token ',api_token)))
content(req)
req <- GET(paste0(baseURL,'api/v1/users'), accept_json() #,
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
req <- GET(paste0(baseURL,'api/v1/users'), accept_json() ,
authorization(usr, pwd, 'basic')
# add_headers(Authorization = paste0('Token ',api_token))
)
req <- GET(paste0(baseURL,'api/v1/users'), accept_json() ,
authorize(usr, pwd, 'basic')
# add_headers(Authorization = paste0('Token ',api_token))
)
req <- GET(paste0(baseURL,'api/v1/users'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(Req)
content(req)
req <- GET(paste0(baseURL,'api/v1/users'), accept_json() ,
# authenticate(usr, pwd, 'basic')
add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
req <- GET(paste0(baseURL,'api/v1/users'), accept_json() ,
authenticate(usr, pwd,   'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
req <- GET(paste0(baseURL,'api/v1/sp/forms'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
usr <- 'test'
req <- GET(paste0(baseURL,'api/v1/sp/forms'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
library(formhub)
req <- GET(paste0(baseURL,'api/v1/sp/'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
content(req)
req <- GET(paste0(baseURL,'api/v1/users?format=json'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
req <- GET(paste0(baseURL,'api/v1/users/sp?format=json'), accept_json() ,
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
authenticate(usr, pwd, 'basic')
)
req
req <- GET(paste0(baseURL,'api/v1/users/sp'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
req <- GET(paste0(baseURL,'nepal'), accept_json() ,
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
req <- GET(paste0(baseURL,'nepal'), accept_json()
# authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
req <- GET(paste0(baseURL,'sp'), accept_json()
# authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
req <- GET(paste0(baseURL,'sp'), accept_json(),
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
content(req)
source('C:/Users/aw/EpiTech/CGSW/RAT-shiny/model/api_helpers.R')
formhubCheck_user(baseURL, 'sp')
formhubCheck_user(baseURL, 'ge')
formhubCheck_user(baseURL, 'nepal')
baseURL
req <- GET(paste0(baseURL,'nepal'), accept_json(),
authenticate(usr, pwd, 'basic')
# add_headers(paste0(usr,":",pwd))
# add_headers(Authorization = paste0('Token ',api_token))
)
req
debug(formhubCheck_user)
formhubCheck_user(baseURL, 'nepal')
req
source('C:/Users/aw/EpiTech/CGSW/RAT-shiny/model/api_helpers.R')
source('C:/Users/aw/EpiTech/CGSW/RAT-shiny/model/api_helpers.R')
formhubCheck_user(baseURL, 'nepal')
source('C:/Users/aw/EpiTech/CGSW/RAT-shiny/model/api_helpers.R')
library(shiny)
Logged = FALSE;
my_username <- "test"
my_password <- "test"
ui1 <- function(){
tagList(
div(id = "login",
wellPanel(textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login", "Log in"))),
tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}")
)}
ui2 <- function(){tagList(tabPanel("Test"))}
ui = (htmlOutput("page"))
server = (function(input, output,session) {
USER <- reactiveValues(Logged = Logged)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
check_exist <- formhubCheck_user(baseURL, Username)
if (check_exist == T) {
if (Id.username == Id.password) {
USER$Logged <- TRUE
}
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1())))
})
}
if (USER$Logged == TRUE)
{
output$page <- renderUI({
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
})
print(ui)
}
})
})
runApp(list(ui = ui, server = server))
library(shiny)
Logged = FALSE;
my_username <- "test"
my_password <- "test"
ui1 <- function(){
tagList(
div(id = "login",
wellPanel(textInput("userName", "Username"),
passwordInput("passwd", "Password"),
br(),actionButton("Login", "Log in"))),
tags$style(type="text/css", "#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}")
)}
ui2 <- function(){tagList(tabPanel("Test"))}
ui = (htmlOutput("page"))
server = (function(input, output,session) {
USER <- reactiveValues(Logged = Logged)
observe({
if (USER$Logged == FALSE) {
if (!is.null(input$Login)) {
if (input$Login > 0) {
Username <- isolate(input$userName)
Password <- isolate(input$passwd)
check_exist <- formhubCheck_user(baseURL, Username)
if (check_exist == T) {
USER$Logged <- TRUE
}
}
}
}
})
observe({
if (USER$Logged == FALSE) {
output$page <- renderUI({
div(class="outer",do.call(bootstrapPage,c("",ui1())))
})
}
if (USER$Logged == TRUE)
{
output$page <- renderUI({
div(class="outer",do.call(navbarPage,c(inverse=TRUE,title = "Contratulations you got in!",ui2())))
})
print(ui)
}
})
})
runApp(list(ui = ui, server = server))
library(shiny)
library(shiny)
## inputs module ---------------------------------------------------------------
setupInput<-function(id){
ns<-NS(id)
tagList(
sliderInput(ns("bins"), "Number of bins:",
min = 1,  max = 50, value = 30),
checkboxInput(ns("print"),"Bin Print")
)
}
setupUI<-function(id){
ns<-NS(id)
tagList(textOutput(ns("binprint")))
}
setup<-function(input,output,session){
bins<-reactive({input$bins})
output$binprint<-renderText({
req(input$print)
paste0("Number of bins: ",input$bins)
})
return(bins)
}
## chart module ----------------------------------------------------------------
chartUI <- function(id) {
ns <- NS(id)
plotOutput(ns("distPlot"))
}
chart <- function(input, output, session, bins) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = bins() + 1)
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
}
## app -------------------------------------------------------------------------
ui <- shinyUI(fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(sidebarPanel(
setupInput("basic")
),
mainPanel(
setupUI("basic"),
chartUI("first"),
chartUI("second")
))
))
server <- shinyServer(function(input, output) {
bins <- callModule(setup,"basic")
callModule(chart, "first", bins)
callModule(chart, "second", bins)
})
shinyApp(ui = ui, server = server)
chartUI("first"),
Skip to content
Personal Open source Business Explore
Sign upSign inPricingBlogSupport
This repository
Search
Watch 3  Star 5  Fork 1 stephlocke/shinymodulesdesignpatterns
Code  Issues 0  Pull requests 0  Pulse  Graphs
Branch: master Find file Copy pathshinymodulesdesignpatterns/input_to_multiplemodules/04_allinputsmodule.R
57ae3d3  on Apr 19
@stephlocke stephlocke Added full input passthrough
1 contributor
RawBlameHistory     68 lines (60 sloc)  1.54 KB
library(shiny)
## inputs module ---------------------------------------------------------------
setupInput<-function(id){
ns<-NS(id)
tagList(
sliderInput(ns("bins"), "Number of bins:",
min = 1,  max = 50, value = 30),
checkboxInput(ns("print"),"Bin Print")
)
}
setupUI<-function(id){
ns<-NS(id)
tagList(tableOutput(ns("inputs")))
}
setup<-function(input,output,session){
# How to display all input values in a table
output$inputs<-renderTable({
as.data.frame(
reactiveValuesToList(input)
)
})
output$binprint<-renderText({
req(input$print)
paste0("Number of bins: ",input$bins)
})
return(input)
}
## chart module ----------------------------------------------------------------
chartUI <- function(id) {
ns <- NS(id)
plotOutput(ns("distPlot"))
}
chart <- function(input, output, session, setup) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = setup$bins + 1)
hist(x,
breaks = bins,
col = 'darkgray',
border = 'white')
})
}
## app -------------------------------------------------------------------------
ui <- shinyUI(fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(sidebarPanel(
setupInput("basic")
),
mainPanel(
setupUI("basic"),
chartUI("first"),
chartUI("second")
))
))
server <- shinyServer(function(input, output) {
bins <- callModule(setup,"basic")
callModule(chart, "first", bins)
callModule(chart, "second", bins)
})
shinyApp(ui = ui, server = server)
